/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import Common.Untils;
import DAO.Impl.InvoiceImpl;
import DAO.InvoiceDAO;
import Model.Invoice;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zero
 */
public class InvoiceSearch extends javax.swing.JDialog {

    private final InvoiceDAO invoiceDAO;
    private final DefaultTableModel modelTable;
    private ArrayList<Invoice> invoiceList;
    private Invoice invoiceSelected;
    
    /**
     * Creates new form InvoiceSearch
     * @param parent
     */
    public InvoiceSearch(java.awt.Frame parent) {
        super(parent, "Tìm kiếm", true);
        invoiceDAO = new InvoiceImpl();
        initComponents();
        Untils.setMaxLength(txtFromDate, 10);
        Untils.setMaxLength(txtToDate, 10);
        setLocationRelativeTo(null);
        modelTable = (DefaultTableModel) tblInvoice.getModel();
        tblInvoice.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = tblInvoice.getSelectedRow();
                if (selectedRow == -1) {
                    invoiceSelected = null;
                }
                else {
                    if (tblInvoice.getValueAt(selectedRow, 0) instanceof Invoice i) {
                        invoiceSelected = i;
                    }
                }
            }
        });
    }
    
    public Invoice getSelected(){
        return this.invoiceSelected;
    }
    
    /**
    * Đổ dữ liệu Warehouse cho JTable tbWarehouse.
    * 
    */
    private void loadInvoice(){
        invoiceSelected = null;
        modelTable.setRowCount(0);
        for (Invoice invoice : invoiceList) {
            Object[] row = new Object[5];
            row[0] = invoice;
            row[1] = invoice.getUserName();
            row[2] = invoice.getTableName();
            row[3] = invoice.getDiscountPercentage();
            row[4] = Untils.formatMoney(invoice.getTotalAmount());
            modelTable.addRow(row);
        }
    }
    
    private boolean checkInputDate(JTextField txt){
        if (txt.getText().trim().length() > 0 && !Untils.validateDate(txt)) {
            txt.requestFocus();
            txt.selectAll();
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoice = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Mã hóa đơn:");

        txtId.setName("Mã hóa đơn"); // NOI18N
        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Ngày:");

        txtFromDate.setName("Ngày bắt đầu"); // NOI18N
        txtFromDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFromDateKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setText("~");

        txtToDate.setName("Ngày kết thúc"); // NOI18N
        txtToDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtToDateKeyTyped(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/market_analysis.png"))); // NOI18N
        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Ngày", "Nhân viên", "Bàn", "Giảm giá (%)", "Tổng tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInvoiceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInvoice);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (!checkInputDate(txtFromDate) || !checkInputDate(txtToDate)) {
            return;
        }
        int id = 0;
        Timestamp fromDate = null;
        Timestamp toDate = null;
        if (txtId.getText().trim().length() > 0) {
            id = Untils.parseToInt(txtId.getText().trim());
        }
        if (txtFromDate.getText().trim().length() > 0) {
            fromDate = Untils.parseStringToTimestamp(txtFromDate.getText().trim());
        }
        if (txtToDate.getText().trim().length() > 0) {
            toDate = Untils.parseStringToTimestamp(txtToDate.getText().trim());
            // Tăng thêm 1 ngày
            toDate = Timestamp.valueOf(toDate.toLocalDateTime().plusDays(1));
        }

        invoiceList = invoiceDAO.getAllInvoices(id, fromDate, toDate);
        loadInvoice();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIdKeyTyped

    private void tblInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInvoiceMouseClicked
        if (evt.getClickCount() == 2 && tblInvoice.getSelectedRow() != -1) {
            int row = tblInvoice.getSelectedRow();
             if (tblInvoice.getValueAt(row, 0) instanceof Invoice i){
                 invoiceSelected = i;
                 dispose();
             }
        }
    }//GEN-LAST:event_tblInvoiceMouseClicked

    private void txtFromDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFromDateKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '/') {
            evt.consume();
        }
    }//GEN-LAST:event_txtFromDateKeyTyped

    private void txtToDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtToDateKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '/') {
            evt.consume();
        }
    }//GEN-LAST:event_txtToDateKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblInvoice;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
}
