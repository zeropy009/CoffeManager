USE MASTER
GO

DROP DATABASE IF EXISTS COFFEE_MANAGER
GO

CREATE DATABASE COFFEE_MANAGER
GO

USE COFFEE_MANAGER
GO

CREATE TABLE [TABLE]
(
	[ID] INT PRIMARY KEY IDENTITY,
	[TABLE_NAME] NVARCHAR(30) NOT NULL,
	[STATUS] BIT DEFAULT 0
)
------------------------------------------
CREATE TABLE [ROLE]
(
	[ID] INT NOT NULL PRIMARY KEY IDENTITY,
	[ROLE_NAME] VARCHAR(20) not null,
);
GO

CREATE TABLE [USER]
(
	[USER_NAME] VARCHAR(30) NOT NULL PRIMARY KEY,
	[PASS_WORD] NVARCHAR(50) NOT NULL,
	[ROLE_ID] INT DEFAULT 2 NOT NULL,
	[FULL_NAME] NVARCHAR(50),
	[SEX] BIT,
	[ADDRESS] NVARCHAR(100),
	[YEAR_OF_BIRTH] INT,
	[PHONE] VARCHAR(15),
	[EMAIL] VARCHAR(50),
	[SALARY] INT,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATE DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
	FOREIGN KEY([ROLE_ID]) REFERENCES [ROLE](ID)
);
GO

CREATE TRIGGER User_Updated
ON [USER]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [USER]
    SET LAST_UPDATE_AT = GETDATE()
    FROM [USER] u
    INNER JOIN inserted i ON u.[USER_NAME] = i.[USER_NAME];
END;
GO

CREATE TABLE CUSTOMER_TIER (
    [ID] INT PRIMARY KEY IDENTITY,
    [TIER_NAME] NVARCHAR(50) NOT NULL, -- (VD: Bronze, Silver, Gold)
    [MIN_PURCHASE] DECIMAL(10,2) NOT NULL, -- Số tiền tối thiểu để đạt cấp độ này
    [DISCOUNT_PERCENTAGE] DECIMAL(5,2) NOT NULL -- Giảm giá được hưởng
);
GO

CREATE TABLE CUSTOMER (
    [ID] INT PRIMARY KEY IDENTITY,
    [NAME] NVARCHAR(50) NOT NULL,
    [PHONE] VARCHAR(15) NOT NULL UNIQUE,
    [EMAIL] VARCHAR(100),
    [TIER_ID] INT,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATETIME DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
    FOREIGN KEY (TIER_ID) REFERENCES CUSTOMER_TIER(ID)
);
GO

CREATE TRIGGER Customer_LastUpdateAt
ON CUSTOMER
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE CUSTOMER
    SET LAST_UPDATE_AT = GETDATE()
    FROM CUSTOMER u
    INNER JOIN inserted i ON u.id = i.id;
END;
GO

CREATE TABLE BEVERAGES_CATEGORY (
	[ID] INT PRIMARY KEY IDENTITY,
	[NAME] NVARCHAR(100) NOT NULL,
);
GO

CREATE TABLE BEVERAGES (
	[ID] INT PRIMARY KEY IDENTITY,
	[NAME] NVARCHAR(100) NOT NULL,
	[PRICE] INT,
	[BEVERAGES_CATEGORY_ID] INT,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATETIME DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
	FOREIGN KEY(BEVERAGES_CATEGORY_ID) REFERENCES BEVERAGES_CATEGORY(ID)
);
GO

CREATE TRIGGER Beverages_Updated
ON CUSTOMER
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE BEVERAGES
    SET LAST_UPDATE_AT = GETDATE()
    FROM BEVERAGES u
    INNER JOIN inserted i ON u.id = i.id;
END;
GO

CREATE TABLE WAREHOUSE(
	[ID] INT PRIMARY KEY IDENTITY,
	[GR_DATE] DATETIME,
	[GI_DATE] DATETIME,
	[USER_NAME] VARCHAR(30) NOT NULL,
	[AMOUNT] INT DEFAULT 0,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATETIME DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
	FOREIGN KEY([USER_NAME]) REFERENCES [USER]([USER_NAME])
);
GO

CREATE TRIGGER Warehouse_Updated
ON WAREHOUSE
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE WAREHOUSE
    SET LAST_UPDATE_AT = GETDATE()
    FROM WAREHOUSE u
    INNER JOIN inserted i ON u.id = i.id;
END;
GO

CREATE TABLE WAREHOUSE_DETAIL(
	[ID] INT PRIMARY KEY IDENTITY,
	[GR_DATE] DATETIME,
	[GI_DATE] DATETIME,
	[USER_NAME] VARCHAR(30) NOT NULL,
	[AMOUNT] INT DEFAULT 0,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATETIME DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
	FOREIGN KEY([USER_NAME]) REFERENCES [USER]([USER_NAME])
);
GO

CREATE TRIGGER WarehouseDetail_Updated
ON WAREHOUSE_DETAIL
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE WAREHOUSE_DETAIL
    SET LAST_UPDATE_AT = GETDATE()
    FROM WAREHOUSE_DETAIL u
    INNER JOIN inserted i ON u.id = i.id;
END;
GO

CREATE TABLE INVOICE(
	[ID] INT PRIMARY KEY IDENTITY,
	[DATE] DATETIME,
	[TOTAL_AMOUNT] INT DEFAULT 0,
	[USER_NAME] VARCHAR(30) NOT NULL,
	[CUSTOMER_ID] INT,
	[DISCOUNT_PERCENTAGE] DECIMAL(5,2) DEFAULT 0,
	[TABLE_ID] INT NOT NULL,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATETIME DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
	FOREIGN KEY([USER_NAME]) REFERENCES [USER]([USER_NAME])
);
GO

CREATE TRIGGER Invoice_Updated
ON INVOICE
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE INVOICE
    SET LAST_UPDATE_AT = GETDATE()
    FROM INVOICE u
    INNER JOIN inserted i ON u.id = i.id;
END;
GO

CREATE TABLE INVOICE_DETAIL(
	[ID] INT PRIMARY KEY IDENTITY,
	[INVOICE_ID] INT NOT NULL,
	[BEVERAGES_ID] INT NOT NULL,
	[QUANTITY] INT DEFAULT 0,
	[TOTAL_AMOUNT] INT DEFAULT 0,
	[PRICE] INT DEFAULT 0,
	[CUSTOMER_ID] INT,
	[DISCOUNT_PERCENTAGE] DECIMAL(5,2) DEFAULT 0,
	[TABLE_ID] INT NOT NULL,
	[CREATED_BY] VARCHAR(30) DEFAULT 0,
	[CREATED_AT] DATETIME DEFAULT GETDATE(),
	[LAST_UPDATE_BY] VARCHAR(30) DEFAULT 0,
	[LAST_UPDATE_AT] DATETIME DEFAULT GETDATE(),
	[DELETED] BIT DEFAULT 0,
	FOREIGN KEY(INVOICE_ID) REFERENCES INVOICE(ID),
	FOREIGN KEY(BEVERAGES_ID) REFERENCES BEVERAGES(ID)
);
GO

CREATE TRIGGER InvoiceDetail_Change
ON INVOICE_DETAIL
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Cập nhật LAST_UPDATE_AT của INVOICE_DETAIL khi có thay đổi
    UPDATE INVOICE_DETAIL
    SET LAST_UPDATE_AT = GETDATE()
    FROM INVOICE_DETAIL d
    INNER JOIN inserted i ON d.ID = i.ID;

    -- Cập nhật TOTAL_AMOUNT của INVOICE (chỉ tính các INVOICE_DETAIL có DELETED = 0)
    UPDATE INVOICE
    SET TOTAL_AMOUNT = CEILING(
        (SELECT COALESCE(SUM(d.PRICE * d.QUANTITY), 0) 
         FROM INVOICE_DETAIL d
         WHERE d.INVOICE_ID = i.ID AND d.DELETED = 0) 
         * (100 - i.DISCOUNT_PERCENTAGE) / 100.0
    )
    FROM INVOICE i
    WHERE EXISTS (SELECT 1 FROM inserted WHERE inserted.INVOICE_ID = i.ID)
       OR EXISTS (SELECT 1 FROM deleted WHERE deleted.INVOICE_ID = i.ID);
END;
GO

INSERT INTO [ROLE] VALUES ('Manager'), ('Staff') 

INSERT INTO [USER] ([USER_NAME], [PASS_WORD], [ROLE_ID], [FULL_NAME], [SEX], [ADDRESS], [YEAR_OF_BIRTH], [PHONE], [EMAIL], [SALARY]) VALUES
('YNM', '192023a7bbd73250516f069df18b500', 1, N'Nguyễn Minh Ý', 1, N'P.Tân Quy, Quận 7, Tp.HCM', 1996, '0987208677', '24410127@ms.uit.edu.vn', 20000000),
('TEST', '192023a7bbd73250516f069df18b500', 2, N'TK test', 0, N'P.Tân Quy, Quận 7, Tp.HCM', 2000, '01234567897', '123456789@gmail.com', 999999999),
('CPTH', '192023a7bbd73250516f069df18b500', 1, N'Phạm Trương Hữu Cường', 1, N'P.Linh Chiểu, Quận Thủ Đức, Tp.HCM', 1985, '0986853817', '24410010@ms.uit.edu.vn', 20000000)

GO

INSERT INTO [CUSTOMER_TIER] ([TIER_NAME], [MIN_PURCHASE], [DISCOUNT_PERCENTAGE]) VALUES
('Đồng', 1000000, 5), ('Bạc', 5000000, 10), ('Vàng', 10000000, 20)
GO